<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>http://example.org/posts/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Oct 2021 11:26:18 +0800</lastBuildDate><atom:link href="http://example.org/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>flink review</title>
      <link>http://example.org/posts/2021-06-18-flink-review/</link>
      <pubDate>Wed, 27 Oct 2021 11:26:18 +0800</pubDate>
      
      <guid>http://example.org/posts/2021-06-18-flink-review/</guid>
      <description>Flink review Apache Flink is a framework and distributed processing engine for stateful computations over unbounded and bounded data streams.
suit ETL, analytics and event-driven applications.
Process of commit job flink can use the yarn, apache mesos and k8s to manage the resource.
as the photo shows the yarn commit job process (mesos and k8s on the other article learn):
  Flink client send the jars and configuartions to hdfs.</description>
    </item>
    
    <item>
      <title>使用orgmode&#43;hugo&#43;github pages to build</title>
      <link>http://example.org/posts/firsttry/</link>
      <pubDate>Wed, 27 Oct 2021 11:26:18 +0800</pubDate>
      
      <guid>http://example.org/posts/firsttry/</guid>
      <description>haha</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/2021-06-09-google-file-system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2021-06-09-google-file-system/</guid>
      <description>Google file system review   component failures.
  files huge
  most files mutated by appending new data rather than overwriting
  API
  Design   detect, tolerate, recover
  modest number of large files
  large streaming reads and small random reads
  sequential writes that append data to files
  concurrent append to the same file
  data opration high sustained bandwidth(nearly)</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/2021-06-16-mapreduce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2021-06-16-mapreduce/</guid>
      <description>MR data processing on large clusters
  process a kv par to generate a set of intermediate kv pairs
  reduce merge all intermediate values with same key
  Programming model Implementation   user program fork the worker and master
  master assign the map and reduce to the worker
  map worker read each line of input files and it to local
  reduce worker remote read the intermediate files</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/2021-06-17-bigtable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2021-06-17-bigtable/</guid>
      <description>BigTable review A distributed storage system for managing structed data.
Introduction   Dose not support full relational data model
  It provides clients with a simple data model which support the dynamic control over data layout and format.
  Data is indexed using row and column names that can be arbirtary strings.
  Data model sparse, distributed, persistent multi-dimensional sorted map!
map is indexed by a row key, column key and a timestamp.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/2021-06-17-yarn-process/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2021-06-17-yarn-process/</guid>
      <description>yarn process 1）client subbmit an application to ask the resource manager to get an instance of application master.
resource manager get back an application ID which used by client to watch resource infomation.
 resource manager find a useful container in node manager, then run the application master instance in this container.(app mstr run in one of the container, this also can seem as one container)
  app master regist info into the RM</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/2021-06-24-chubby/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2021-06-24-chubby/</guid>
      <description>Chubby review Lock service for loosely-coupled distributed systems.
Introduction chubby&amp;rsquo;s instance call the cell. chubby&amp;rsquo;s client interface such like a simple file system that performs whole-file reads and writes, augmented with advisory locks and with notification of various events such as file modfiication.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/2021-06-24-paxos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2021-06-24-paxos/</guid>
      <description>Paxos review from the paxos to multi paxos.
 Reference [1] chrome-extension://cdonnmffkdaoajfknoeeecmchibpmkmg/assets/pdf/web/viewer.html?file=https%3A%2F%2Flamport.azurewebsites.net%2Fpubs%2Fpaxos-simple.pdf
[2] https://en.wikipedia.org/wiki/Paxos_(computer_science)
[3] https://zhuanlan.zhihu.com/p/44106775
[4] https://liu-jianhao.github.io/2019/05/paxosmulti-paxos%E8%AF%A6%E8%A7%A3/</description>
    </item>
    
  </channel>
</rss>
